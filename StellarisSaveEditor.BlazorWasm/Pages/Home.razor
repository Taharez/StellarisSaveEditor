@page "/"
@implements IDisposable

@using System.IO.Compression
@using System.IO
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@using StellarisSaveEditor.Models
@using StellarisSaveEditor.Common
@using StellarisSaveEditor.Parser
@using StellarisSaveEditor.BlazorWasm.Helpers

<PageTitle>Stellaris Save Viewer</PageTitle>

<div class="top-row px-4" style="padding-bottom: 10px;">
    <InputFile OnChange="HandleFileSelected" />
    <EditForm EditContext="_filterEditContext">
        <label>
            Hyper lanes
            <InputCheckbox @bind-Value="FilterSettings!.ShowHyperLanes"></InputCheckbox>
        </label>
        <label>
            Home system
            <InputCheckbox @bind-Value="FilterSettings!.ShowHomeSystem"></InputCheckbox>
        </label>
        <label>
            Wormholes
            <InputCheckbox @bind-Value="FilterSettings!.ShowWormholes"></InputCheckbox>
        </label>
        <label>
            Gateways
            <InputCheckbox @bind-Value="FilterSettings!.ShowGateways"></InputCheckbox>
        </label>
        <label>
            L-Gates
            <InputCheckbox @bind-Value="FilterSettings!.ShowLgates"></InputCheckbox>
        </label>
        <label>
            Search:
            <InputText @bind-Value="FilterSettings!.SearchSystemName"></InputText>
        </label>
    </EditForm>
</div>

<BECanvas Width="600" Height="600" @ref="CanvasReference"></BECanvas>

@code {

    private IBrowserFile? _file;

    private bool _shouldRender = true;
    private Canvas2DContext? _context;

    protected BECanvasComponent? CanvasReference;
    protected InputCheckbox? ShowHomeSystemCheckbox;

    private ILogger _logger = new BlazorLogger();

    private GameState? _gameState { get; set; }

    private MapSettings? MapSettings { get; set; }
    private FilterSettings? FilterSettings { get; set; }
    private EditContext? _filterEditContext;
    private BlazorRenderer? _renderer { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        MapSettings ??= new();
        FilterSettings ??= new();
        _filterEditContext = new EditContext(MapSettings);
        _filterEditContext.OnFieldChanged += OnFilterModelChanged;
    }

    private void OnFilterModelChanged(Object? sender, FieldChangedEventArgs args)
    {
        _shouldRender = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        _filterEditContext!.OnFieldChanged -= OnFilterModelChanged;
    }

    protected override bool ShouldRender()
    {
        var shouldRender = _shouldRender;
        _shouldRender = false;
        return shouldRender;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CanvasReference == null)
            return;

        if (_gameState != null)
        {
            await _renderer!.Render();
        }
    }

    async void HandleFileSelected(InputFileChangeEventArgs e)
    {
        _shouldRender = false;

        try
        {
            _file = e.File;

            using var fileStream = _file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            await using var ms = new MemoryStream();
            await fileStream.CopyToAsync(ms);
            ms.Position = 0; // rewind

            using var zip = new ZipArchive(ms, ZipArchiveMode.Read);
            var gameStateFile = zip.Entries.FirstOrDefault(e => e.FullName.Equals("gamestate"));
            if (gameStateFile == null)
                return;

            using var reader = new StreamReader(gameStateFile.Open());
            var gamestateText = ReadLines(reader).ToList();

            var parser = new GameStateParser(_logger);
            var parseTask = Task.Run(() => parser.ParseGamestate(gamestateText.ToList()));
            _gameState = await parseTask;

            MapSettings!.Init(_gameState, CanvasReference!.Width, CanvasReference!.Height);
            _context = await CanvasReference.CreateCanvas2DAsync();
            _renderer = new BlazorRenderer(_context, MapSettings, FilterSettings!, _gameState);
            _shouldRender = true;
            StateHasChanged();
        }
        catch(Exception ex)
        {
            _logger.Log(LogLevel.Critical, "Error reading file: " + ex.Message);
        }
    }

    public IEnumerable<string> ReadLines(StreamReader reader)
    {
        string? line;
        while ((line = reader.ReadLine()) != null)
        {
            yield return line;
        }
    }
}